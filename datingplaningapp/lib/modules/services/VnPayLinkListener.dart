import 'dart:async';
import 'package:flutter/material.dart';
import 'package:uni_links/uni_links.dart';
import '../services/VNPayService.dart';
import '../services/paymentService.dart';

class VnPayLinkListener {
  StreamSubscription? _sub;
  final PaymentService _paymentService = PaymentService();

  void startListening(BuildContext context) {
    // L·∫Øng nghe deep link
    _sub = uriLinkStream.listen((Uri? uri) async {
      if (uri == null) return;

      print('üîó Received deep link: $uri');

      // Ki·ªÉm tra xem c√≥ ph·∫£i l√† VNPay callback kh√¥ng
      if (uri.scheme == 'myapp' && uri.host == 'vnpay_callback') {
        await _handleVNPayCallback(context, uri);
      }
    }, onError: (err) {
      print('‚ùå Deep link error: $err');
    });

    // Ki·ªÉm tra deep link khi app m·ªü l·∫°i t·ª´ background
    _checkInitialLink(context);
  }

  // Ki·ªÉm tra link ban ƒë·∫ßu khi app ƒë∆∞·ª£c m·ªü t·ª´ deep link
  Future<void> _checkInitialLink(BuildContext context) async {
    try {
      final initialUri = await getInitialUri();
      if (initialUri != null) {
        print('üîó Initial link: $initialUri');
        if (initialUri.scheme == 'myapp' &&
            initialUri.host == 'vnpay_callback') {
          await _handleVNPayCallback(context, initialUri);
        }
      }
    } catch (e) {
      print('‚ùå Error getting initial link: $e');
    }
  }

  Future<void> _handleVNPayCallback(BuildContext context, Uri uri) async {
    try {
      // üîπ Parse params th·ªß c√¥ng ƒë·ªÉ gi·ªØ nguy√™n encoding
      final params = _parseQueryString(uri.query);

      print('üì© VNPay callback received:');
      print('Full URI: $uri');
      print('Raw query: ${uri.query}');
      print('Params count: ${params.length}');
      print('---');
      params.forEach((key, value) {
        print('  $key: $value');
      });
      print('---');

      // Validate ch·ªØ k√Ω
      print('üîê Validating signature...');
      final isValid = VNPayService.validateCallback(params);

      if (!isValid) {
        _showDialog(
          context,
          title: '‚ùå L·ªói b·∫£o m·∫≠t',
          message: 'Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá. Vui l√≤ng li√™n h·ªá h·ªó tr·ª£.',
          isSuccess: false,
        );
        return;
      }

      // Ki·ªÉm tra response code
      final responseCode = params['vnp_ResponseCode'];
      final isSuccess = responseCode == '00';

      if (isSuccess) {
        // X·ª≠ l√Ω callback qua PaymentService
        final processed = await _paymentService.handleVNPayCallback(params);

        if (processed) {
          final amount = int.tryParse(params['vnp_Amount'] ?? '0') ?? 0;
          final orderId = params['vnp_TxnRef'] ?? '';
          final transactionNo = params['vnp_TransactionNo'] ?? '';

          _showDialog(
            context,
            title: 'üéâ Thanh to√°n th√†nh c√¥ng',
            message: 'M√£ ƒë∆°n h√†ng: $orderId\n'
                'S·ªë ti·ªÅn: ${_formatAmount(amount)} VNƒê\n'
                'M√£ GD VNPay: $transactionNo\n\n'
                'T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!',
            isSuccess: true,
          );
        } else {
          _showDialog(
            context,
            title: '‚ùå L·ªói x·ª≠ l√Ω',
            message: 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t giao d·ªãch. Vui l√≤ng li√™n h·ªá h·ªó tr·ª£.',
            isSuccess: false,
          );
        }
      } else {
        // Thanh to√°n th·∫•t b·∫°i
        final errorMessage = _getErrorMessage(responseCode);
        _showDialog(
          context,
          title: '‚ùå Thanh to√°n th·∫•t b·∫°i',
          message: errorMessage,
          isSuccess: false,
        );
      }
    } catch (e) {
      print('‚ùå Error handling VNPay callback: $e');
      _showDialog(
        context,
        title: '‚ùå C√≥ l·ªói x·∫£y ra',
        message: 'Kh√¥ng th·ªÉ x·ª≠ l√Ω k·∫øt qu·∫£ thanh to√°n: $e',
        isSuccess: false,
      );
    }
  }

  void _showDialog(
    BuildContext context, {
    required String title,
    required String message,
    required bool isSuccess,
  }) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (dialogContext) => AlertDialog(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16),
        ),
        title: Row(
          children: [
            Icon(
              isSuccess ? Icons.check_circle : Icons.error,
              color: isSuccess ? Colors.green : Colors.red,
              size: 32,
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Text(
                title,
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: isSuccess ? Colors.green : Colors.red,
                ),
              ),
            ),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              message,
              style: const TextStyle(fontSize: 15),
            ),
            if (isSuccess) ...[
              const SizedBox(height: 16),
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.green.shade50,
                  borderRadius: BorderRadius.circular(8),
                ),
                child: const Row(
                  children: [
                    Icon(Icons.info_outline, color: Colors.green, size: 20),
                    SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        'S·ªë d∆∞ ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√†o t√†i kho·∫£n',
                        style: TextStyle(
                          fontSize: 13,
                          color: Colors.green,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ],
        ),
        actions: [
          TextButton(
            style: TextButton.styleFrom(
              backgroundColor: isSuccess ? Colors.green : Colors.grey,
              foregroundColor: Colors.white,
              padding: const EdgeInsets.symmetric(
                horizontal: 24,
                vertical: 12,
              ),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
              ),
            ),
            onPressed: () {
              Navigator.of(dialogContext).pop();
              // Refresh m√†n h√¨nh payment ƒë·ªÉ c·∫≠p nh·∫≠t UI
              if (isSuccess && context.mounted) {
                Navigator.of(context).pop(); // Quay l·∫°i m√†n h√¨nh tr∆∞·ªõc
              }
            },
            child: const Text(
              'ƒê√≥ng',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ],
      ),
    );
  }

  String _formatAmount(int amount) {
    final value = amount / 100;
    return value.toStringAsFixed(0).replaceAllMapped(
          RegExp(r'(\d{1,3})(?=(\d{3})+(?!\d))'),
          (Match m) => '${m[1]},',
        );
  }

  String _getErrorMessage(String? code) {
    switch (code) {
      case '07':
        return 'Tr·ª´ ti·ªÅn th√†nh c√¥ng. Giao d·ªãch b·ªã nghi ng·ªù (li√™n quan t·ªõi l·ª´a ƒë·∫£o, giao d·ªãch b·∫•t th∆∞·ªùng).';
      case '09':
        return 'Th·∫ª/T√†i kho·∫£n ch∆∞a ƒëƒÉng k√Ω d·ªãch v·ª• InternetBanking t·∫°i ng√¢n h√†ng.';
      case '10':
        return 'Kh√°ch h√†ng x√°c th·ª±c th√¥ng tin th·∫ª/t√†i kho·∫£n kh√¥ng ƒë√∫ng qu√° 3 l·∫ßn';
      case '11':
        return 'ƒê√£ h·∫øt h·∫°n ch·ªù thanh to√°n. Vui l√≤ng th·ª±c hi·ªán l·∫°i giao d·ªãch.';
      case '12':
        return 'Th·∫ª/T√†i kho·∫£n c·ªßa kh√°ch h√†ng b·ªã kh√≥a.';
      case '13':
        return 'Qu√Ω kh√°ch nh·∫≠p sai m·∫≠t kh·∫©u x√°c th·ª±c giao d·ªãch (OTP).';
      case '24':
        return 'Kh√°ch h√†ng h·ªßy giao d·ªãch';
      case '51':
        return 'T√†i kho·∫£n kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch.';
      case '65':
        return 'T√†i kho·∫£n ƒë√£ v∆∞·ª£t qu√° h·∫°n m·ª©c giao d·ªãch trong ng√†y.';
      case '75':
        return 'Ng√¢n h√†ng thanh to√°n ƒëang b·∫£o tr√¨.';
      case '79':
        return 'Nh·∫≠p sai m·∫≠t kh·∫©u thanh to√°n qu√° s·ªë l·∫ßn quy ƒë·ªãnh.';
      default:
        return 'Giao d·ªãch th·∫•t b·∫°i. M√£ l·ªói: $code';
    }
  }

  void dispose() {
    _sub?.cancel();
  }

  _parseQueryString(String query) {
    final Map<String, String> params = {};
    final pairs = query.split('&');
    for (var pair in pairs) {
      final keyValue = pair.split('=');
      if (keyValue.length == 2) {
        final key = Uri.decodeComponent(keyValue[0]);
        final value = Uri.decodeComponent(keyValue[1]);
        params[key] = value;
      }
    }
    return params;
  }
}
